# compiler flags
[constants]
arch_flags = ['-mcpu=cortex-a9', '-mfpu=neon-fp16', '-mfloat-abi=hard'] # the fastest arch flags possible for the A9 in the v5
optimizations = ['-ffunction-sections', '-fdata-sections', '-fno-strict-aliasing'] # -fno-strict-aliasing used to deal with an issue in the FreeRTOS source
format_flags = ['-fdiagnostics-color'] # makes compiler output pretty
stdlib_conf = ['-D_POSIX_MONOTONIC_CLOCK']
link_flags = ['-Wl,--gc-sections', '-Wl,--no-warn-rwx-segments'] # gc-sections makes the binary small, and no-warn-rwx-sections silences a useless warning
sys_links = ['-nostdlib', '-lc', '-lm', '-lgcc', '-lstdc++'] # will be removed entirely once stdlib is fully supported
linkerscript = ['-T../scripts/v5.ld']

# build options
[built-in options]
c_std = 'gnu2x' # we don't use gnu23 because it's only supported in gcc v14, and we're transitioning to c++ anyway
cpp_std = 'gnu++23' # the latest version supported by gcc v13 and and v14
default_library = 'static' # the v5 does not support shared objects
prefer_static = 'true'
wrap_mode = 'forcefallback' # this might change when we use vcpkg
warning_level = '3'
debug = true # these are stripped from the elf, so you can debug without the extra upload time
optimization = 's' # small executables mean short uploads. 99.99% of teams don't need the performance
c_args = arch_flags + optimizations + format_flags + stdlib_conf
cpp_args = c_args
c_link_args = c_args + sys_links + link_flags + linkerscript
cpp_link_args = c_link_args

# what executables to use to compile ZestCode
[binaries]
c = 'arm-none-eabi-gcc'
cpp = 'arm-none-eabi-g++'
ar = 'arm-none-eabi-ar'
objcopy = 'arm-none-eabi-objcopy'
objdump = 'arm-none-eabi-objdump'
strip = 'arm-none-eabi-strip'
size = 'arm-none-eabi-size'

# specs of the v5 brain
[host_machine]
system = 'none'
kernel = 'none'
cpu_family = 'arm'
cpu = 'cortex-a9'
endian = 'little'